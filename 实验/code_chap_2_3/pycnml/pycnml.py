# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pycnml
else:
    import _pycnml

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pycnml.delete_SwigPyIterator

    def value(self):
        return _pycnml.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pycnml.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pycnml.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pycnml.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pycnml.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pycnml.SwigPyIterator_copy(self)

    def next(self):
        return _pycnml.SwigPyIterator_next(self)

    def __next__(self):
        return _pycnml.SwigPyIterator___next__(self)

    def previous(self):
        return _pycnml.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pycnml.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pycnml.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pycnml.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pycnml.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pycnml.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pycnml.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pycnml.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pycnml:
_pycnml.SwigPyIterator_swigregister(SwigPyIterator)

CNML_1H8 = _pycnml.CNML_1H8
CNML_1H16 = _pycnml.CNML_1H16
CNML_C10 = _pycnml.CNML_C10
CNML_1H8MINI = _pycnml.CNML_1H8MINI
CNML_MLU100 = _pycnml.CNML_MLU100
CNML_MLU270 = _pycnml.CNML_MLU270
CNML_MLU220 = _pycnml.CNML_MLU220
class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnml.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnml.FloatVector___nonzero__(self)

    def __bool__(self):
        return _pycnml.FloatVector___bool__(self)

    def __len__(self):
        return _pycnml.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnml.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnml.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnml.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnml.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnml.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnml.FloatVector___setitem__(self, *args)

    def pop(self):
        return _pycnml.FloatVector_pop(self)

    def append(self, x):
        return _pycnml.FloatVector_append(self, x)

    def empty(self):
        return _pycnml.FloatVector_empty(self)

    def size(self):
        return _pycnml.FloatVector_size(self)

    def swap(self, v):
        return _pycnml.FloatVector_swap(self, v)

    def begin(self):
        return _pycnml.FloatVector_begin(self)

    def end(self):
        return _pycnml.FloatVector_end(self)

    def rbegin(self):
        return _pycnml.FloatVector_rbegin(self)

    def rend(self):
        return _pycnml.FloatVector_rend(self)

    def clear(self):
        return _pycnml.FloatVector_clear(self)

    def get_allocator(self):
        return _pycnml.FloatVector_get_allocator(self)

    def pop_back(self):
        return _pycnml.FloatVector_pop_back(self)

    def erase(self, *args):
        return _pycnml.FloatVector_erase(self, *args)

    def __init__(self, *args):
        _pycnml.FloatVector_swiginit(self, _pycnml.new_FloatVector(*args))

    def push_back(self, x):
        return _pycnml.FloatVector_push_back(self, x)

    def front(self):
        return _pycnml.FloatVector_front(self)

    def back(self):
        return _pycnml.FloatVector_back(self)

    def assign(self, n, x):
        return _pycnml.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnml.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _pycnml.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _pycnml.FloatVector_reserve(self, n)

    def capacity(self):
        return _pycnml.FloatVector_capacity(self)
    __swig_destroy__ = _pycnml.delete_FloatVector

# Register FloatVector in _pycnml:
_pycnml.FloatVector_swigregister(FloatVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnml.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnml.IntVector___nonzero__(self)

    def __bool__(self):
        return _pycnml.IntVector___bool__(self)

    def __len__(self):
        return _pycnml.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnml.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnml.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnml.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnml.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnml.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnml.IntVector___setitem__(self, *args)

    def pop(self):
        return _pycnml.IntVector_pop(self)

    def append(self, x):
        return _pycnml.IntVector_append(self, x)

    def empty(self):
        return _pycnml.IntVector_empty(self)

    def size(self):
        return _pycnml.IntVector_size(self)

    def swap(self, v):
        return _pycnml.IntVector_swap(self, v)

    def begin(self):
        return _pycnml.IntVector_begin(self)

    def end(self):
        return _pycnml.IntVector_end(self)

    def rbegin(self):
        return _pycnml.IntVector_rbegin(self)

    def rend(self):
        return _pycnml.IntVector_rend(self)

    def clear(self):
        return _pycnml.IntVector_clear(self)

    def get_allocator(self):
        return _pycnml.IntVector_get_allocator(self)

    def pop_back(self):
        return _pycnml.IntVector_pop_back(self)

    def erase(self, *args):
        return _pycnml.IntVector_erase(self, *args)

    def __init__(self, *args):
        _pycnml.IntVector_swiginit(self, _pycnml.new_IntVector(*args))

    def push_back(self, x):
        return _pycnml.IntVector_push_back(self, x)

    def front(self):
        return _pycnml.IntVector_front(self)

    def back(self):
        return _pycnml.IntVector_back(self)

    def assign(self, n, x):
        return _pycnml.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnml.IntVector_resize(self, *args)

    def insert(self, *args):
        return _pycnml.IntVector_insert(self, *args)

    def reserve(self, n):
        return _pycnml.IntVector_reserve(self, n)

    def capacity(self):
        return _pycnml.IntVector_capacity(self)
    __swig_destroy__ = _pycnml.delete_IntVector

# Register IntVector in _pycnml:
_pycnml.IntVector_swigregister(IntVector)

class DoubleVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnml.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnml.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _pycnml.DoubleVector___bool__(self)

    def __len__(self):
        return _pycnml.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _pycnml.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnml.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnml.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnml.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnml.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnml.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _pycnml.DoubleVector_pop(self)

    def append(self, x):
        return _pycnml.DoubleVector_append(self, x)

    def empty(self):
        return _pycnml.DoubleVector_empty(self)

    def size(self):
        return _pycnml.DoubleVector_size(self)

    def swap(self, v):
        return _pycnml.DoubleVector_swap(self, v)

    def begin(self):
        return _pycnml.DoubleVector_begin(self)

    def end(self):
        return _pycnml.DoubleVector_end(self)

    def rbegin(self):
        return _pycnml.DoubleVector_rbegin(self)

    def rend(self):
        return _pycnml.DoubleVector_rend(self)

    def clear(self):
        return _pycnml.DoubleVector_clear(self)

    def get_allocator(self):
        return _pycnml.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _pycnml.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _pycnml.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        _pycnml.DoubleVector_swiginit(self, _pycnml.new_DoubleVector(*args))

    def push_back(self, x):
        return _pycnml.DoubleVector_push_back(self, x)

    def front(self):
        return _pycnml.DoubleVector_front(self)

    def back(self):
        return _pycnml.DoubleVector_back(self)

    def assign(self, n, x):
        return _pycnml.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _pycnml.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _pycnml.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _pycnml.DoubleVector_reserve(self, n)

    def capacity(self):
        return _pycnml.DoubleVector_capacity(self)
    __swig_destroy__ = _pycnml.delete_DoubleVector

# Register DoubleVector in _pycnml:
_pycnml.DoubleVector_swigregister(DoubleVector)

class FloatVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnml.FloatVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnml.FloatVector2___nonzero__(self)

    def __bool__(self):
        return _pycnml.FloatVector2___bool__(self)

    def __len__(self):
        return _pycnml.FloatVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnml.FloatVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnml.FloatVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnml.FloatVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnml.FloatVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnml.FloatVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnml.FloatVector2___setitem__(self, *args)

    def pop(self):
        return _pycnml.FloatVector2_pop(self)

    def append(self, x):
        return _pycnml.FloatVector2_append(self, x)

    def empty(self):
        return _pycnml.FloatVector2_empty(self)

    def size(self):
        return _pycnml.FloatVector2_size(self)

    def swap(self, v):
        return _pycnml.FloatVector2_swap(self, v)

    def begin(self):
        return _pycnml.FloatVector2_begin(self)

    def end(self):
        return _pycnml.FloatVector2_end(self)

    def rbegin(self):
        return _pycnml.FloatVector2_rbegin(self)

    def rend(self):
        return _pycnml.FloatVector2_rend(self)

    def clear(self):
        return _pycnml.FloatVector2_clear(self)

    def get_allocator(self):
        return _pycnml.FloatVector2_get_allocator(self)

    def pop_back(self):
        return _pycnml.FloatVector2_pop_back(self)

    def erase(self, *args):
        return _pycnml.FloatVector2_erase(self, *args)

    def __init__(self, *args):
        _pycnml.FloatVector2_swiginit(self, _pycnml.new_FloatVector2(*args))

    def push_back(self, x):
        return _pycnml.FloatVector2_push_back(self, x)

    def front(self):
        return _pycnml.FloatVector2_front(self)

    def back(self):
        return _pycnml.FloatVector2_back(self)

    def assign(self, n, x):
        return _pycnml.FloatVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnml.FloatVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnml.FloatVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnml.FloatVector2_reserve(self, n)

    def capacity(self):
        return _pycnml.FloatVector2_capacity(self)
    __swig_destroy__ = _pycnml.delete_FloatVector2

# Register FloatVector2 in _pycnml:
_pycnml.FloatVector2_swigregister(FloatVector2)

class IntVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnml.IntVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnml.IntVector2___nonzero__(self)

    def __bool__(self):
        return _pycnml.IntVector2___bool__(self)

    def __len__(self):
        return _pycnml.IntVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnml.IntVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnml.IntVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnml.IntVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnml.IntVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnml.IntVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnml.IntVector2___setitem__(self, *args)

    def pop(self):
        return _pycnml.IntVector2_pop(self)

    def append(self, x):
        return _pycnml.IntVector2_append(self, x)

    def empty(self):
        return _pycnml.IntVector2_empty(self)

    def size(self):
        return _pycnml.IntVector2_size(self)

    def swap(self, v):
        return _pycnml.IntVector2_swap(self, v)

    def begin(self):
        return _pycnml.IntVector2_begin(self)

    def end(self):
        return _pycnml.IntVector2_end(self)

    def rbegin(self):
        return _pycnml.IntVector2_rbegin(self)

    def rend(self):
        return _pycnml.IntVector2_rend(self)

    def clear(self):
        return _pycnml.IntVector2_clear(self)

    def get_allocator(self):
        return _pycnml.IntVector2_get_allocator(self)

    def pop_back(self):
        return _pycnml.IntVector2_pop_back(self)

    def erase(self, *args):
        return _pycnml.IntVector2_erase(self, *args)

    def __init__(self, *args):
        _pycnml.IntVector2_swiginit(self, _pycnml.new_IntVector2(*args))

    def push_back(self, x):
        return _pycnml.IntVector2_push_back(self, x)

    def front(self):
        return _pycnml.IntVector2_front(self)

    def back(self):
        return _pycnml.IntVector2_back(self)

    def assign(self, n, x):
        return _pycnml.IntVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnml.IntVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnml.IntVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnml.IntVector2_reserve(self, n)

    def capacity(self):
        return _pycnml.IntVector2_capacity(self)
    __swig_destroy__ = _pycnml.delete_IntVector2

# Register IntVector2 in _pycnml:
_pycnml.IntVector2_swigregister(IntVector2)

class DoubleVector2(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _pycnml.DoubleVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pycnml.DoubleVector2___nonzero__(self)

    def __bool__(self):
        return _pycnml.DoubleVector2___bool__(self)

    def __len__(self):
        return _pycnml.DoubleVector2___len__(self)

    def __getslice__(self, i, j):
        return _pycnml.DoubleVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pycnml.DoubleVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pycnml.DoubleVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pycnml.DoubleVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pycnml.DoubleVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pycnml.DoubleVector2___setitem__(self, *args)

    def pop(self):
        return _pycnml.DoubleVector2_pop(self)

    def append(self, x):
        return _pycnml.DoubleVector2_append(self, x)

    def empty(self):
        return _pycnml.DoubleVector2_empty(self)

    def size(self):
        return _pycnml.DoubleVector2_size(self)

    def swap(self, v):
        return _pycnml.DoubleVector2_swap(self, v)

    def begin(self):
        return _pycnml.DoubleVector2_begin(self)

    def end(self):
        return _pycnml.DoubleVector2_end(self)

    def rbegin(self):
        return _pycnml.DoubleVector2_rbegin(self)

    def rend(self):
        return _pycnml.DoubleVector2_rend(self)

    def clear(self):
        return _pycnml.DoubleVector2_clear(self)

    def get_allocator(self):
        return _pycnml.DoubleVector2_get_allocator(self)

    def pop_back(self):
        return _pycnml.DoubleVector2_pop_back(self)

    def erase(self, *args):
        return _pycnml.DoubleVector2_erase(self, *args)

    def __init__(self, *args):
        _pycnml.DoubleVector2_swiginit(self, _pycnml.new_DoubleVector2(*args))

    def push_back(self, x):
        return _pycnml.DoubleVector2_push_back(self, x)

    def front(self):
        return _pycnml.DoubleVector2_front(self)

    def back(self):
        return _pycnml.DoubleVector2_back(self)

    def assign(self, n, x):
        return _pycnml.DoubleVector2_assign(self, n, x)

    def resize(self, *args):
        return _pycnml.DoubleVector2_resize(self, *args)

    def insert(self, *args):
        return _pycnml.DoubleVector2_insert(self, *args)

    def reserve(self, n):
        return _pycnml.DoubleVector2_reserve(self, n)

    def capacity(self):
        return _pycnml.DoubleVector2_capacity(self)
    __swig_destroy__ = _pycnml.delete_DoubleVector2

# Register DoubleVector2 in _pycnml:
_pycnml.DoubleVector2_swigregister(DoubleVector2)

class Layer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    layer = property(_pycnml.Layer_layer_get, _pycnml.Layer_layer_set)
    name = property(_pycnml.Layer_name_get, _pycnml.Layer_name_set)
    type = property(_pycnml.Layer_type_get, _pycnml.Layer_type_set)
    isParamLoaded = property(_pycnml.Layer_isParamLoaded_get, _pycnml.Layer_isParamLoaded_set)

    def __init__(self, layer, name, type, is_param_loaded):
        _pycnml.Layer_swiginit(self, _pycnml.new_Layer(layer, name, type, is_param_loaded))
    __swig_destroy__ = _pycnml.delete_Layer

# Register Layer in _pycnml:
_pycnml.Layer_swigregister(Layer)

class CnmlNet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, core_num=1, core_version=CNML_MLU270):
        _pycnml.CnmlNet_swiginit(self, _pycnml.new_CnmlNet(core_num, core_version))
    __swig_destroy__ = _pycnml.delete_CnmlNet

    def setInputShape(self, dim_1, dim_2, dim_3, dim_4):
        return _pycnml.CnmlNet_setInputShape(self, dim_1, dim_2, dim_3, dim_4)

    def createConvLayer(self, layer_name, out_channel, kernel_size, stride, dilation, pad, quant_param):
        return _pycnml.CnmlNet_createConvLayer(self, layer_name, out_channel, kernel_size, stride, dilation, pad, quant_param)

    def createMlpLayer(self, layer_name, output_num, quant_param):
        return _pycnml.CnmlNet_createMlpLayer(self, layer_name, output_num, quant_param)

    def createReLuLayer(self, layer_name):
        return _pycnml.CnmlNet_createReLuLayer(self, layer_name)

    def createSoftmaxLayer(self, layer_name, axis):
        return _pycnml.CnmlNet_createSoftmaxLayer(self, layer_name, axis)

    def createPoolingLayer(self, layer_name, kernel_size, stride):
        return _pycnml.CnmlNet_createPoolingLayer(self, layer_name, kernel_size, stride)

    def createFlattenLayer(self, layer_name, output_shape):
        return _pycnml.CnmlNet_createFlattenLayer(self, layer_name, output_shape)

    def setInputData(self, data):
        return _pycnml.CnmlNet_setInputData(self, data)

    def forward(self):
        return _pycnml.CnmlNet_forward(self)

    def getOutputData(self):
        return _pycnml.CnmlNet_getOutputData(self)

    def loadParams(self, layer_id, filter_data, bias_data, quant_param):
        return _pycnml.CnmlNet_loadParams(self, layer_id, filter_data, bias_data, quant_param)

    def size(self):
        return _pycnml.CnmlNet_size(self)

    def getLayerName(self, layer_id):
        return _pycnml.CnmlNet_getLayerName(self, layer_id)

    def needToBeQuantized(self, layer_id):
        return _pycnml.CnmlNet_needToBeQuantized(self, layer_id)

# Register CnmlNet in _pycnml:
_pycnml.CnmlNet_swigregister(CnmlNet)

CAST = _pycnml.CAST
CONVOLUTION = _pycnml.CONVOLUTION
LRN = _pycnml.LRN
MLP = _pycnml.MLP
NORMALIZE = _pycnml.NORMALIZE
RELU = _pycnml.RELU
SOFTMAX = _pycnml.SOFTMAX
POOL = _pycnml.POOL
FLATTEN = _pycnml.FLATTEN
class QuantParam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    position = property(_pycnml.QuantParam_position_get, _pycnml.QuantParam_position_set)
    scale = property(_pycnml.QuantParam_scale_get, _pycnml.QuantParam_scale_set)

    def __init__(self, *args):
        _pycnml.QuantParam_swiginit(self, _pycnml.new_QuantParam(*args))
    __swig_destroy__ = _pycnml.delete_QuantParam

# Register QuantParam in _pycnml:
_pycnml.QuantParam_swigregister(QuantParam)

class QuantTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getQuantParam(self, input_data, layer_name):
        return _pycnml.QuantTool_getQuantParam(self, input_data, layer_name)

    def __init__(self):
        _pycnml.QuantTool_swiginit(self, _pycnml.new_QuantTool())
    __swig_destroy__ = _pycnml.delete_QuantTool

# Register QuantTool in _pycnml:
_pycnml.QuantTool_swigregister(QuantTool)



